require 'erb'

IGNORED = ["Rakefile", "README", /~$/, /^\./]
NON_DOT = ["functions"]

def backup(file)
  return unless File.exists?(file) || File.symlink?(file)
  backup_count = Dir["#{file}.backup*"].length
  File.rename(file, "#{file}.backup#{backup_count}") && puts("Moving '#{file}' to '#{file}.backup#{backup_count}'")
end

# For debugging
dry_run = false
puts "- This is a dry run" if dry_run

desc "Create symlinks for the dotfiles, keeping backups of the old files."
task :update do
  puts "Getting the latest updates..."
  `git pull && git submodule update --init --merge`
  `vim +BundleClean! +BundleInstall +qall`
end

task :setup do
  puts "Setting up..."

  files = `git ls-tree --name-only HEAD`.lines.map(&:strip)
  files.reject! { |f| IGNORED.any? { |m| f.match(m) } }

  files.each do |file|
    repoFile = File.join(Dir.pwd, file)

    if file.match('\.erb$')
      dotfile = file.gsub(/\.erb$/, '')
      homeFile = File.expand_path("~/.#{dotfile}")
      generatedFile = ERB.new(File.read(repoFile)).result
      if !File.exists?(homeFile) or generatedFile != File.read(homeFile)
        backup(homeFile) unless dry_run
        puts "Writing generated #{file} to ~/.#{dotfile}"
        File.open(homeFile, 'w') { |f| f.write(generatedFile) } unless dry_run
      else
        puts "~/.#{dotfile} is identical to the one generated by: #{file}"
      end
    else
      filename = NON_DOT.include?(file) ? file : ".#{file}"
      homeFile = File.expand_path("~/#{filename}")
      if File.symlink?(homeFile) and File.readlink(homeFile) == repoFile
        puts "symlink for ~/#{filename} already exists"
      else
        backup(homeFile) unless dry_run

        puts "Creating the symlink: ~/#{filename} -> #{repoFile}"
        File.symlink(repoFile, homeFile) unless dry_run
      end
    end
  end
end

task :install => [:setup, :update]
